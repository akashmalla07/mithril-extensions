<html>
<head>
  <title></title>
  <script src="../mithril.js/mithril.js"></script>
  <script src="mithril.sugartags.js"></script>
  <script src="mithril.template.js"></script>
  <style>
    .hide { display: none; }
  </style>
</head>
<body>

<div id="content"></div>

<script>
//  Example of bi-directional data binding
var userApp = {
    model: function(firstName, lastName) {
        this.firstName = m.prop(firstName);
        this.lastName = m.prop(lastName);
        this.email = m.prop("");
    },
    controller: function() {
        var self = this;
        window.model = self.user = new userApp.model("John", "Doe");

        setTimeout(function(){
          console.log('hello');
          self.user.email("hello@world.com");
        }, 2000);
    },
    submit: function(e){
      e.preventDefault();
      console.log('submit', this.user);
      alert('e');
      return false;
    },
    view: function(ctrl) {
      return m("form", binds(ctrl.user), [
          m("input[name=firstName]", {value: ctrl.user.firstName()}),
          m("input[name=lastName]", {value: ctrl.user.lastName()}),
          m("input[name=email]", {value: ctrl.user.email(), onchange: m.withAttr("value", ctrl.user.email)}),
          m("button", {type: "button", onclick: ctrl.submit}, "Save")
      ]);

    }
};


//  data binding helper function
//  This is one-way only...
//  TODO: 2 way
function binds(data, aggressive) {
  var events = ['change'],
    setValue = function(key, value, data) {
      if(typeof data[key] === 'function') {
        data[key](value);
      } else {
        data[key] = value;
      }
    }, obj = {};

  if(aggressive) {
    events.push('keyup');
  }

  for(var i = 0; i < events.length; i += 1) {
    obj['on' + events[i]] = function(e) {
/*
      //onchange: m.withAttr("value", data.user.name), 
  m.withAttr = function(prop, withAttrCallback) {

    return function(e) {
      e = e || event
      withAttrCallback(prop in e.currentTarget ? e.currentTarget[prop] : e.currentTarget.getAttribute(prop))
    }

  }
*/
    //onchange: m.withAttr("value", data.user.name), ==>

    var onchange = function(e){
      e = e || event;
      withAttrCallback('value' in e.currentTarget ? e.currentTarget['value'] : e.currentTarget.getAttribute('value'))

    }

      setValue(e.target.name, e.target.value, data);
    };
  }
  return obj;
};

//initialize
m.module(document.body, userApp);
</script>

</body>
</html>